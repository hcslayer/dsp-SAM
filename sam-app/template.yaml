AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: > 
  Test run of the SAM platform. At first glance, SAM may be a way to avoid the
  headaches and complexities of API gateway and Lambda integration. 
  TO TEST 
    - CORS enabled API gateway with GET and POST routes. 
    - Dummy lambdas for the routes 
    - S3 based storage and CI/CD pipelines 
    - Cloudwatch events and internal lambda functions 

Parameters: 
  Env: 
    Description: The SAM application context. 
    Type: String 
    AllowedValues: 
      - TESTING
      - DEV
      - PROD
    Default: TESTING 

Globals: 
  Function:
    Runtime: python37
    Timeout: 5 
    Tracing: PassThrough
    Environment: 
      Variables: 
        APP_ENV: !Ref Env  
    
Resources: 
  LambdaTestRole: # extremely liberal access -- DO NOT CARRY TO DEV 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
      Path: /
      ManagedPolicyArns: 
      - arn:aws:iam::aws:policy/AWSLambdaFullAccess
      Policies: 
      - PolicyName: apig
        PolicyDocument: 
          Version: '2012-10-17'
          Statement:
          - Action: 
            - 'execute-api:*' 
            Effect: Allow
            Resource: 'arn:aws:execute-api:*:*:*' 

  NotebooksGetFunction: 
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaTestRole.Arn 
      CodeUri: routes/notebooks-get/
      Handler: main.handler
      Runtime: python3.7
      Events: 
        ApiGet: 
          Type: Api
          Properties:
            Path: /notebooks
            Method: get
  
  NotebooksPostFunction: 
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaTestRole.Arn  
      CodeUri: routes/notebooks-post/
      Handler: main.handler
      Runtime: python3.7
      Events:  
        ApiPost:
          Type: Api
          Properties:
            Path: /notebooks
            Method: post
  
  NotebooksSubIdGetFunction: 
    Type: AWS::Serverless::Function
    Properties: 
      Role: !GetAtt LambdaTestRole.Arn
      CodeUri: routes/notebooks-id-get/
      Handler: main.handler
      Runtime: python3.7
      Events: 
        ApiGetSubresource: 
          Type: Api
          Properties: 
            Path: /notebooks/{id}
            Method: get


  